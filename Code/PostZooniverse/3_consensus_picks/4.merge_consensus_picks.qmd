---
title: "Merge consensus picks"
format: html
editor: visual
---

## Merge Consensus Picks

I have combined all of the files for each classification and workflow in the folder `Output/PostZooniverse/Consensus/By workflow/` that now contains all of the files for each workflow number & workflow version combination. The files originate from the following locations:

-   During the process to determine consensus picks from zooniverse-identified camera events, I produce the following files in the `3.determine_consensus_picks.Rmd` code:

    -   A file in `Output/PostZooniverse/Consensus/Correct` - this should include the correct classifications that had 100% consensus in the Zooniverse ID process

    -   A file in `Output/PostZooniverse/Consensus/Needs check` that has images that need to be checked.

    -   A checklist file that just lists the image numbers for the events that need to be checked, saved in `Output/PostZooniverse/Consensus/Needs check/Checklists.`

    -   These files have 3 added columns: File_location, Classifier, and Notes

    -   A file in which the correct species is assigned in the image files that we are not checking. We extract the subject IDs for all of the cleaned classifications that are Not part of the list that needs to be checked, and save the image numbers as well as the final choice. This file is saved in `Outputs/PostZooniverse/Consensus/Correct/Assigned`

    -   For some reason, there are subject IDs from the cleaned classification file that are not accounted for in the Assigned and Needs check categories. They will still need to have final species assignments made. The files with these subjects and image IDs are saved in `Outputs/PostZooniverse/Consensus/Needs check/Last Ones`.These files have many more columns than the others.

There should be one of these files for each of the different Zooniverse workflows. The format for each of these files is a data frame with a column containing the subject ID, some number of columns with image ids for the event, a column for the number of classifications, a column indicating the number of different species that were identified, and, in some cases, a column for the final choice of species.

### Combine files per workflow

Let's now go to a single workflow number and version and combine all of the files together. To do so, we need to:

1.  Assign the folder name
2.  List the files in the folder
3.  Read the column names for each file and see that they are the same between files
4.  Read in each file; add columnn indicating the original filename, the workflow number and workflow version
5.  Append the files together into one master data frame for that particular workflow version and number.

### Let's go

#### Set things up

```{r,include=FALSE}
rm(list = ls())
library(here)
library(tidyverse)
source(here())

myFunctions<-list.files(here("Code/Functions"), pattern = "R") 
#points to files that need to be sourced

sapply(here("Code/Functions", myFunctions), source) #sources all of the functions in the Functions folder.

```

Set up the path to the desired folder

```{r, include = FALSE}
rstudioapi::showDialog( title = "Let's give R some file information", message = "Select the directory containing the classfication files you wish to use")

outputs_path <- paste0(here(),"/Output/PostZooniverse/Consensus")
folder_path <-rstudioapi::selectDirectory(path = outputs_path,  label= "Select desired folder")
```

Now get a list of the files in that folder

```{r}
myFiles <- list.files(path = folder_path, pattern = ".csv")
```

Read the column names and see that they are the same between files

I created a function called `col_names_to_List` that returns a list in which each element is a vector with all of the column names (the 'header') from each file in the directory.

I created a second function called `compare_column_names` that takes the list and a vector of file names and returns a data frame indicating, for each pair of files, if all of the column names are the same or not.

We can use these two functions to run a check before combining data from multiple files.

```{r}
myList <- col_names_to_List(folder_path, myFiles)
fileComparison <- compare_column_names(myList, myFiles)
View(fileComparison)
```

Ok. In this case, all of the column names are the same. Next I would like to iterate through opening each file, adding a column name for workflow_version_number and filename and then combining the rows from each file all into one large data frame.

Let's give it a whirl.

Step one. Open first file

```{r}
df <- read.csv(paste0(folder_path,"/", myFiles[1]), stringsAsFactors = T)
df$wfv_wfn <- basename(folder_path)
df$filename <- myFiles[1]
```

Make it a loop

```{r}
for(i in 1:length(myFiles)){
  tempDF <- read.csv(paste0(folder_path,"/", myFiles[i]), stringsAsFactors = T)
tempDF$wfv_wfn <- basename(folder_path)
tempDF$filename <- myFiles[i]
  if(i == 1){
    output_df <- tempDF
  } else{
    output_df <- rbind(output_df, tempDF)
  }
}
```

### subproblem
I realized while working through wfn16695_wfv11.8 first that there was a discrepency in column names, as is seen below.

Once I fixed the discrepency, which I did in R so that I would have a record (vs. just changing a file in excel), I re-ran my custom functions to compare and then combine data frames and realized that the second file in the directory does not have all of its species assigned, so I am going to do that now.
### Save output dataframe

Now save the output dataframe

```{r}
output_location <- here("Output/PostZooniverse/Consensus/By workflow")

myfile <- paste0(
  output_location, "/", basename(folder_path), "-combined.csv")

write.csv(output_df, myfile, row.names = FALSE)
```


Now repeat for each different workflow and version.

With wfn_16695_wfv11.8, there is a discrepency in that for some rows, the images are img1, img2, and img3 and for others they are img4, img5, img6. Let's fix

```{r}
fix_df <- read.csv(here(paste0(folder_path, "/", myFiles[1])))
```
Find those rows for which Img1, Img2 and Img3 are NA
```{r}
fix_rows <- which(is.na(fix_df$Img1))

fix_df$Img1[fix_rows] <- fix_df$Img4[fix_rows]
fix_df$Img2[fix_rows] <- fix_df$Img5[fix_rows]
fix_df$Img3[fix_rows] <- fix_df$Img6[fix_rows]
```

Now check if any of the Img1, Img2, Img3 columns are NA
```{r}
 sum(!is.na(fix_df$Img1))
sum(!is.na(fix_df$Img2))
sum(!is.na(fix_df$Img3))

```
All columns have an image for Img1, so I can now get rid of columns Img4:Img6

```{r}
fix_df <- fix_df |> select(-(Img4:Img6))
```
Now create new subdirectory and write fix_df and second, correct file to it.

```{r}
ifelse(!dir.exists(paste0(folder_path,"/Use_these")), dir.create(paste0(folder_path,"/Use_these")), "Folder exists already")
#checks to see if a folder called "Use_these" exists in the directory, and, if it does not, creates it.

write.csv(fix_df, here(paste0(folder_path,"/Use_these/",myFiles[1], "_fixed.csv")), row.names = FALSE)

```

Now copy the second file to that folder
```{r}
file.copy(from = here(paste0(folder_path,"/", myFiles[2])), to = here(paste0(folder_path,"/Use_these/", myFiles[2])))
```
Now compare the fixed files. Start again up top, but point to the "Use_these"folder as the base folder.






